data(baseball, package = "plyr")
head(baseball)
players <- unique(baseball$id)
head(players)
for i in players
print(unique(baseball$id))
for(i in players){
print(h/ab)
}
for(i in players){
print("h"/"ab")
}
for(i in players){
baseball$ba<-("h"/"ab")
}
sapply(baseball, class)
baseball$h <- as.numeric(as.integer(baseball$h))
baseball$ab <- as.numeric(as.integer(baseball$ab))
players <- unique(baseball$id)
for() i in players
print(unique(baseball$id))
for(i in players){
baseball$ba<-("h"/"ab")
}
baseball$h <- as.numeric(as.integer(baseball$h))
baseball$ab <- as.numeric(as.integer(baseball$ab))
players <- unique(baseball$id)
for(i in players){
baseball$ba<-("h"/"ab")
}
baseball$h <- as.numeric(as.integer(baseball$h))
baseball$ab <- as.numeric(as.integer(baseball$ab))
players <- unique(baseball$id)
for(i in players){
baseball$[ba]<-("h"/"ab")
}
baseball$h <- as.numeric(as.integer(baseball$h))
baseball$ab <- as.numeric(as.integer(baseball$ab))
players <- unique(baseball$id)
for(i in players){
baseball[ba]<-("h"/"ab")
}
baseball$h <- as.numeric(as.integer(baseball$h))
baseball$ab <- as.numeric(as.integer(baseball$ab))
players <- unique(baseball$id)
for(i in players){
baseball["ba"]<-("h"/"ab")
}
baseball$h <- as.numeric(as.integer(baseball$h))
baseball$ab <- as.numeric(as.integer(baseball$ab))
players <- unique(baseball$id)
for(i in players){
baseball["ba"]<-(players$h/players$ab)
}
baseball$ba <- for (i in sub){
print(mean(sub$h/sub$ab))
}
baseball$ba <- for (i in sub) {
print(mean(sub$h/sub$ab))
}
sub <- baseball[baseball$id == id, ]
#ba <- mean(sub$h/sub$ab)
baseball$ba <- for (i in sub) {
print(mean(sub$h/sub$ab))
}
players <- unique(baseball$id)
res <- data.frame(id = players,
ba = NA)
for(id in players){
sub <- baseball[baseball$id == id, ]
ba <- mean(sub$h/sun$ab)
res[res$id == id,]$ba <- ba
}
players <- unique(baseball$id)
res <- data.frame(id = players,
ba = NA)
for(id in players){
sub <- baseball[baseball$id == id, ]
ba <- mean(sub$h/sub$ab)
res[res$id == id,]$ba <- ba
}
View(res)
library('rvest')
url <- paste0(
"https://www.wunderground.com/history/airport/",
"KAMW/2016/11/15/DailyHistory.html"
)
weather_data <- read_html(url)
head(html_table(weather_data)[[1]])
library('rvest')
url <- paste0(
"https://www.wunderground.com/history/airport/",
"KIKV/2016/11/16/DailyHistory.html"
)
weather_data <- read_html(url)
head(html_table(weather_data)[[1]])
library("httr")
url <- "ftp://ftp.ncdc.noaa.gov/pub/data/noaa//isd-history.txt"
res <- GET(url, write_disk(path = basename(url)))
res$request$output$path
install.packages(httr)
install.packages("httr")
library("request")
library("dplyr")
res <- api("http://omdbapi.com") %>%
api_query(s = "robin hood", r = json)
res$Search
install.packages("httr")
install.packages("httr")
library("request")
library("dplyr")
res <- api("http://omdbapi.com") %>%
api_query(s = "robin hood", r = json)
res$Search
install.packages("request")
library("request")
library("dplyr")
res <- api("http://omdbapi.com") %>%
api_query(s = "robin hood", r = json)
res$Search
res <- api("http://omdbapi.com") %>%
api_query(s = "robin hood", r = json)
res$Search
url <- "https://images-na.ssl-images-amazon.com/images/M/MV5BMTg0OTg5MjExN15BMl5BanBnXkFtZTgwMjg3OTgzMTE@._V1_SX300.jpg"
res <- GET(url, write_disk(path = basename(url)))
res$request$output$path
library(tidyverse)
library(modelr)
options(na.action = na.warn)
ggplot(sim1, aes(x, y)) +
geom_point()
model1 <- function(a, data) {
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)
measure_distance <- function(mod, data) {
diff <- data$y - model1(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7, 1.5), sim1)
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
library(purrr)
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- model1 %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
library(tidyverse)
library(modelr)
library(purrr)
options(na.action = na.warn)
ggplot(sim1, aes(x, y)) +
geom_point()
model1 <- function(a, data) {
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)
measure_distance <- function(mod, data) {
diff <- data$y - model1(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7, 1.5), sim1)
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
install.packages("purrr")
library(tidyverse)
library(modelr)
library(purrr)
options(na.action = na.warn)
ggplot(sim1, aes(x, y)) +
geom_point()
model1 <- function(a, data) {
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)
measure_distance <- function(mod, data) {
diff <- data$y - model1(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7, 1.5), sim1)
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
install.packages("purrr")
install.packages("purrr")
library(tidyverse)
library(modelr)
library(purrr)
options(na.action = na.warn)
ggplot(sim1, aes(x, y)) +
geom_point()
model1 <- function(a, data) {
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)
measure_distance <- function(mod, data) {
diff <- data$y - model1(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7, 1.5), sim1)
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
models <- models %>% mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
install.packages("devtools")
install.packages("roxygen2")
install.packages("testthat")
library(devtools)
has_devel()
getwd()
getwd(devtools)
getwd()
setwd("/Users/jaredflater/Documents/agron560_data_management/AGRON-590-Project/data/")
getwd()
read.table(tidy_cobs, "/t")
ls
load("~/Documents/agron560_data_management/AGRON-590-Project/data/Tidy_Cobs.txt")
load("~/Documents/agron560_data_management/AGRON-590-Project/data/KBase_MGRast_Metadata_9May2013_EMB.csv")
setwd("/Users/jaredflater/Documents/agron560_data_management/AGRON-590-Project")
read.table(file = "~/data/tidy_cobs")
read.table(file = "/Users/jaredflater/Documents/agron560_data_management/AGRON-590-Project/data/Tidy_Cobs.txt")
read.table(file = "/Users/jaredflater/Documents/agron560_data_management/AGRON-590-Project/data/Tidy_Cobs.txt", row.names = 1)
read.table(file = "/Users/jaredflater/Documents/agron560_data_management/AGRON-590-Project/data/Tidy_Cobs.txt", sep = "/t")
read.table(file = "/Users/jaredflater/Documents/agron560_data_management/AGRON-590-Project/data/Tidy_Cobs.txt", sep = "/tab")
read.table(file = "/Users/jaredflater/Documents/agron560_data_management/AGRON-590-Project/data/Tidy_Cobs.txt", sep = "t")
read.table(file = "/Users/jaredflater/Documents/agron560_data_management/AGRON-590-Project/data/Tidy_Cob.csv", sep = ",")
read.table(file = "/Users/jaredflater/Documents/agron560_data_management/AGRON-590-Project/data/Tidy_Cobs", sep = "t")
read.table(file = "/Users/jaredflater/Documents/agron560_data_management/AGRON-590-Project/data/Tidy_Cobs.txt", sep = "t")
getwd()
## Loading data and setting working directory
install.packages(c("dplyr" , "ggplot2"))
getwd()
cobs_data<- read.csv("data/KBase_MGRast_Metadata_9May2013_EMB.csv", stringsAsFactors = FALSE)
## changing heading names
colnames(cobs_data)<-c("sample_Id" , "sample_month" , "sample_year" , "crop" , "sample_block" , "agg_frac" , "MGRAST_Id" , "agrochem_addition" , "crop_rot" , "land_use" , "veg_class" , "veg_class_meth" , "drain_class" , "extreme_event" , "FAO_class" , "fire_hist" , "soil_hor" , "soil_hor_meth" , "link_soil_method" , "soil_tax" , "soil_tax_meth" , "MGRAST_Id" , "micro_bm" , "micro_bm_meth" , "misc_param" , "pH" , "pH_meth" , "dna_mix" , "land_use_pre" , "land_use_pre_meth" , "sample_position" , "salinity_meth" , "sample_wt_dna" , "siev_size" , "slope_aspect" , "slope_grad" , "soil_type" , "soil_type_meth" , "store_cond" , "texture" , "texture_meth" , "till" , "total_N" , "total_N_meth" , "total_OC_meth" , "total_OC" , "soil_water" , "soil_water_meth" , "total_C" , "misc_param_1" , "MBN_dry" , "MBN_applied" , "Ext_C_dry" , "Ext_C_applied" , "Ext_C_N_dry" , "Ext_N_applied" , "Bulk_dense" , "Ext_P_dry" , "AMF_col" , "AP_act" , "BG_act" , "BX_act" , "CB_act" , "NAG_act" , "Sum_C_act" , "MBC_dry" , "MBC_applied" , "MBC_MBN_meth" , "Ext_C_Ext_N_meth" , "AMF_col_meth" , "root_bm" , "root_dep" , "AMF_col_bm" , "MBC:MBN" , "MWD" , "agg_frac_prop" , "N2O_2011" , "CH4_2011" , "N2O_2012" , "CO2_2011" , "CO2_2012")
## name to remove (duplicate column & first row)
to_remove <- names(which(table(names(cobs_data)) > 1))
cobs_updated <- cobs_data[-1, !(to_remove == names(cobs_data))]
## summary to find if blanks are blanks/nulls/etc.
summary(cobs_updated)
table(cobs_updated$total_OC_meth)
empty <- numeric(0)
for(i in 1:ncol(cobs_updated)){
if(sum(cobs_updated[, i] == "") == nrow(cobs_updated)) {
empty <- c(empty, i)
}
}
subset_cobs <- select(cobs_updated, -empty)
## parsing columns
library(tidyverse)
parsed_cobs <- subset_cobs %>%
separate("texture", into = c("sand", "silt", "clay"), sep=",") %>%
separate(sample_Id, into = c("plot_treatment", "agg_fraction", "date"), sep="-") %>%
## deleting unnecessary columns after parsing
parsed_cobs[2:3]<- list(NULL)
## splitting column "plot_treatment" using regex
library(stringi)
parsed_cobs$plot <- unlist(stri_extract_all_regex(parsed_cobs$plot_treatment, pattern = "[0-9]+"))
parsed_cobs$treatment <- unlist(stri_extract_all_regex(parsed_cobs$plot_treatment, pattern = "[A-Z]+"))
tidy_cobs <- select(parsed_cobs, plot, treatment, sample_month:CO2_2012)
install.packages(c("dplyr", "ggplot2"))
## Loading data and setting working directory
install.packages(c("dplyr" , "ggplot2"))
getwd()
cobs_data<- read.csv("data/KBase_MGRast_Metadata_9May2013_EMB.csv", stringsAsFactors = FALSE)
## changing heading names
colnames(cobs_data)<-c("sample_Id" , "sample_month" , "sample_year" , "crop" , "sample_block" , "agg_frac" , "MGRAST_Id" , "agrochem_addition" , "crop_rot" , "land_use" , "veg_class" , "veg_class_meth" , "drain_class" , "extreme_event" , "FAO_class" , "fire_hist" , "soil_hor" , "soil_hor_meth" , "link_soil_method" , "soil_tax" , "soil_tax_meth" , "MGRAST_Id" , "micro_bm" , "micro_bm_meth" , "misc_param" , "pH" , "pH_meth" , "dna_mix" , "land_use_pre" , "land_use_pre_meth" , "sample_position" , "salinity_meth" , "sample_wt_dna" , "siev_size" , "slope_aspect" , "slope_grad" , "soil_type" , "soil_type_meth" , "store_cond" , "texture" , "texture_meth" , "till" , "total_N" , "total_N_meth" , "total_OC_meth" , "total_OC" , "soil_water" , "soil_water_meth" , "total_C" , "misc_param_1" , "MBN_dry" , "MBN_applied" , "Ext_C_dry" , "Ext_C_applied" , "Ext_C_N_dry" , "Ext_N_applied" , "Bulk_dense" , "Ext_P_dry" , "AMF_col" , "AP_act" , "BG_act" , "BX_act" , "CB_act" , "NAG_act" , "Sum_C_act" , "MBC_dry" , "MBC_applied" , "MBC_MBN_meth" , "Ext_C_Ext_N_meth" , "AMF_col_meth" , "root_bm" , "root_dep" , "AMF_col_bm" , "MBC:MBN" , "MWD" , "agg_frac_prop" , "N2O_2011" , "CH4_2011" , "N2O_2012" , "CO2_2011" , "CO2_2012")
## name to remove (duplicate column & first row)
to_remove <- names(which(table(names(cobs_data)) > 1))
cobs_updated <- cobs_data[-1, !(to_remove == names(cobs_data))]
## summary to find if blanks are blanks/nulls/etc.
summary(cobs_updated)
table(cobs_updated$total_OC_meth)
empty <- numeric(0)
for(i in 1:ncol(cobs_updated)){
if(sum(cobs_updated[, i] == "") == nrow(cobs_updated)) {
empty <- c(empty, i)
}
}
subset_cobs <- select(cobs_updated, -empty)
## parsing columns
library(tidyverse)
parsed_cobs <- subset_cobs %>%
separate("texture", into = c("sand", "silt", "clay"), sep=",") %>%
separate(sample_Id, into = c("plot_treatment", "agg_fraction", "date"), sep="-")
## deleting unnecessary columns after parsing
parsed_cobs[2:3]<- list(NULL)
## splitting column "plot_treatment" using regex
library(stringi)
parsed_cobs$plot <- unlist(stri_extract_all_regex(parsed_cobs$plot_treatment, pattern = "[0-9]+"))
parsed_cobs$treatment <- unlist(stri_extract_all_regex(parsed_cobs$plot_treatment, pattern = "[A-Z]+"))
tidy_cobs <- select(parsed_cobs, plot, treatment, sample_month:CO2_2012)
library(tidyverse)
parsed_cobs <- subset_cobs %>%
separate("texture", into = c("sand", "silt", "clay"), sep=",") %>%
separate(sample_Id, into = c("plot_treatment", "agg_fraction", "date"), sep="-")
ummary(cobs_updated)
table(cobs_updated$total_OC_meth)
empty <- numeric(0)
for(i in 1:ncol(cobs_updated)){
if(sum(cobs_updated[, i] == "") == nrow(cobs_updated)) {
empty <- c(empty, i)
}
}
subset_cobs <- select(cobs_updated, -empty)
library(tidyverse)
parsed_cobs <- subset_cobs %>%
separate("texture", into = c("sand", "silt", "clay"), sep=",") %>%
separate(sample_Id, into = c("plot_treatment", "agg_fraction", "date"), sep="-")
parsed_cobs[2:3]<- list(NULL)
library(stringi)
parsed_cobs$plot <- unlist(stri_extract_all_regex(parsed_cobs$plot_treatment, pattern = "[0-9]+"))
parsed_cobs$treatment <- unlist(stri_extract_all_regex(parsed_cobs$plot_treatment, pattern = "[A-Z]+"))
tidy_cobs <- select(parsed_cobs, plot, treatment, sample_month:CO2_2012)
View(tidy_cobs)
